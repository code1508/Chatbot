# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qT01GN_TJVrUBJ-CCnTLc49HIsRSX4Hb
"""

import pandas as pd
import numpy as np
import re
import nltk
nltk.download('punkt_tab')
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


# Load dataset (example dataset)
df = pd.read_csv('symptom_disease_data.csv')

# Text Preprocessing
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

stop_words = set(stopwords.words('english'))

def clean_text(text):
    text = re.sub(r'\W', ' ', text)
    text = text.lower()
    words = word_tokenize(text)
    words = [word for word in words if word not in stop_words]
    return " ".join(words)

df['cleaned_symptoms'] = df['symptoms'].apply(clean_text)

# Convert symptoms into numerical vectors
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['cleaned_symptoms'])

# Encode disease labels
y = df['disease']
y = pd.factorize(y)[0]

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Test model
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Model Accuracy: {accuracy:.2f}')

# Function to predict disease from symptoms
def predict_disease(symptom_text):
    symptom_text = clean_text(symptom_text)
    vector = vectorizer.transform([symptom_text])
    prediction = clf.predict(vector)
    return df['disease'].unique()[prediction[0]]

# Example usage
user_input = "I have a stomach ache"
predicted_disease = predict_disease(user_input)
print(f"Predicted Disease: {predicted_disease}")



